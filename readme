                         _   _                           _    
    /\                  (_) (_)                         | |   
   /  \     ___    ___   _   _   ______    __ _   _ __  | |_  
  / /\ \   / __|  / __| | | | | |______|  / _` | | '__| | __| 
 / ____ \  \__ \ | (__  | | | |          | (_| | | |    \ |_  
/_/    \_\ |___/  \___| |_| |_|           \__,_| |_|     \__| 
                                                              
                                                              


Ascii-art is a program which consists in receiving a string as an argument and outputting the string in a graphic representation using ASCII. Time to write big.

What we mean by a graphic representation using ASCII, is to write the string received using ASCII characters, as you can see in the example below:

@@@@@@BB@@@@``^^``^^``@@BB$$@@BB$$
@@%%$$$$^^^^WW&&8888&&^^""BBBB@@@@
@@@@@@""WW8888&&WW888888WW``@@@@$$
BB$$``&&&&WWWW8888&&&&8888&&``@@@@
$$``&&WW88&&88&&&&8888&&88WW88``$$
@@""&&&&&&&&88888888&&&&&&88&&``$$
``````^^``^^^^^^````""^^``^^``^^``
""WW^^@@@@^^``````^^BB@@^^``^^&&``
^^&&^^@@````^^``&&``@@````^^^^&&``
``WW&&^^""``^^WW&&&&""``^^^^&&88``
^^8888&&&&&&WW88&&88WW&&&&88&&WW``
@@``&&88888888WW&&WW88&&88WW88^^$$
@@""88&&&&&&&&888888&&``^^&&88``$$
@@@@^^&&&&&&""``^^^^^^8888&&^^@@@@
@@@@@@^^888888&&88&&&&MM88^^BB$$$$
@@@@@@BB````&&&&&&&&88""``BB@@BB$$
$$@@$$$$$$$$``````````@@$$@@$$$$$$

    This project handles an input with numbers, letters, spaces, special characters and \n.
    Take a look at the ASCII manual.





  ____                                  _                    
 / __ \                                (_)                   
| |  | | __   __   ___   _ __  __   __  _    ___  __      __ 
| |  | | \ \ / /  / _ \ | '__| \ \ / / | |  / _ \ \ \ /\ / / 
| |__| |  \ V /  |  __/ | |     \ V /  | | |  __/  \ V  V /  
 \____/    \_/    \___| |_|      \_/   |_|  \___|   \_/\_/   
                                                             
                                                             


    The project is written in Go.

    The code respects the good practices.

    Standard.txt File holds the ascii characters







 _____                 _                           _     _                        
|_   _|               | |                         | |   (_)                       
  | |    _ __    ___  | |_   _ __   _   _    ___  | |_   _    ___    _ __    ___  
  | |   | '_ \  / __| | __| | '__| | | | |  / __| | __| | |  / _ \  | '_ \  / __| 
 _| |_  | | | | \__ \ \ |_  | |    | |_| | | (__  \ |_  | | | (_) | | | | | \__ \ 
|_____| |_| |_| |___/  \__| |_|     \__,_|  \___|  \__| |_|  \___/  |_| |_| |___/ 
                                                                                  
                                                                                  
1- make sure you have installed everything in repository.

2-open the terminal and make sure you are in the folder you kept main.go in.

3-Pass the text you want to stylize as a command-line argument. For example:

                    go run . "Hello, World!"





 _    _                               
| |  | |                              
| |  | |  ___    __ _    __ _    ___  
| |  | | / __|  / _` |  / _` |  / _ \ 
| |__| | \__ \ | (_| | | (_| | |  __/ 
 \____/  |___/  \__,_|  \__, |  \___| 
                         __/ |        
                        |___/         


student$ go run . "{Hello There}" | cat -e
   __  _    _          _   _               _______   _                           __    $
  / / | |  | |        | | | |             |__   __| | |                          \ \   $
 | |  | |__| |   ___  | | | |   ___          | |    | |__     ___   _ __    ___   | |  $
/ /   |  __  |  / _ \ | | | |  / _ \         | |    |  _ \   / _ \ | '__|  / _ \   \ \ $
\ \   | |  | | |  __/ | | | | | (_) |        | |    | | | | |  __/ | |    |  __/   / / $
 | |  |_|  |_|  \___| |_| |_|  \___/         |_|    |_| |_|  \___| |_|     \___|  | |  $
  \_\                                                                            /_/   $
                                                                                       $





     _____           _                 
    / ____|         | |                
   | |        ___   | |   ___    _ __  
   | |       / _ \  | |  / _ \  | '__| 
   | |____  | (_) | | | | (_) | | |    
    \_____|  \___/  |_|  \___/  |_|    
                                    
                                    
The output manipulates colors using the flag --color=<color> <letters to be colored>, in which --color is the flag and <color> is the color desired by the user and <letters to be colored> is the letter or letters that you can chose to be colored. These colors can be achieved using different notations (color code systems, like RGB, hsl, ANSI...), it is up to you to choose which one you want to use.

    You are able to choose between coloring a single letter or a set of letters.
    If the letter is not specified, the whole string is colored.
    The flag must have exactly the same format as above, any other formats return the following usage message:

Usage: go run . [OPTION] [STRING]

EX: go run . --color=<color> <letters to be colored> "something"

the colors you can use are:

    Black
    Red
    Green
    Yellow
    Blue
    Magenta
    Cyan
    White
    BrightBlack
    BrightRed
    BrightGreen
    BrightYellow
    BrightBlue
    BrightMagenta
    BrightCyan
    BrightWhite
    Orange
    Brown
    Azure
    Ivory
    Teal
    Silver
    Purple
    Navy blue
    Pea green
    Gray
    Maroon
    Charcoal
    Aquamarine
    Coral
    Fuchsia
    Wheat
    Lime
    Crimson
    Khaki
    Hot pink
    Olden
    Plum
    Olive



   ______    _____  
   |  ____|  / ____| 
   | |__    | (___   
   |  __|    \___ \  
   | |       ____) | 
   |_|      |_____/  


    The usage must respect this format go run . [STRING] [BANNER], any other formats must return the following usage message:

Usage: go run . [STRING] [BANNER]

EX: go run . something standard

If there are other ascii-art optional projects implemented, the program should accept other correctly formatted [OPTION] and/or [BANNER].
Additionally, the program must still be able to run with a single [STRING] argument.
Usage

$ go run . "hello" standard | cat -e
 _              _   _          $
| |            | | | |         $
| |__     ___  | | | |   ___   $
|  _ \   / _ \ | | | |  / _ \  $
| | | | |  __/ | | | | | (_) | $
|_| |_|  \___| |_| |_|  \___/  $
                               $
                               $
$ go run . "Hello There!" shadow | cat -e
                                                                                         $
_|    _|          _| _|                _|_|_|_|_| _|                                  _| $
_|    _|   _|_|   _| _|   _|_|             _|     _|_|_|     _|_|   _|  _|_|   _|_|   _| $
_|_|_|_| _|_|_|_| _| _| _|    _|           _|     _|    _| _|_|_|_| _|_|     _|_|_|_| _| $
_|    _| _|       _| _| _|    _|           _|     _|    _| _|       _|       _|          $
_|    _|   _|_|_| _| _|   _|_|             _|     _|    _|   _|_|_| _|         _|_|_| _| $
                                                                                         $
                                                                                         $
$ go run . "Hello There!" thinkertoy | cat -e
                                                $
o  o     o o           o-O-o o                o $
|  |     | |             |   |                | $
O--O o-o | | o-o         |   O--o o-o o-o o-o o $
|  | |-' | | | |         |   |  | |-' |   |-'   $
o  o o-o o o o-o         o   o  o o-o o   o-o O $
                                                $
                                                $




  ____    _    _   _______   _____    _    _   _______  
 / __ \  | |  | | |__   __| |  __ \  | |  | | |__   __| 
| |  | | | |  | |    | |    | |__) | | |  | |    | |    
| |  | | | |  | |    | |    |  ___/  | |  | |    | |    
| |__| | | |__| |    | |    | |      | |__| |    | |    
 \____/   \____/     |_|    |_|       \____/     |_|    
                                                        
                                                        
                  
 writing the result into a .txt file.

The file must be named by using the flag --output=<fileName.txt>, in which --output is the flag and <fileName.txt> is the file name which will contain the output.

    The flag must have exactly the same format as above, any other formats return the following usage message:

Usage: go run . [OPTION] [STRING] [BANNER]

EX: go run . --output=<fileName.txt> something standard


Usage

$ go run . --output=banner.txt "hello" standard
$ cat -e banner.txt
 _              _   _          $
| |            | | | |         $
| |__     ___  | | | |   ___   $
|  _ \   / _ \ | | | |  / _ \  $
| | | | |  __/ | | | | | (_) | $
|_| |_|  \___| |_| |_|  \___/  $
                               $
                               $
$
$ go run . --output=banner.txt "Hello There!" shadow
$ cat -e banner.txt
                                                                                         $
_|    _|          _| _|                _|_|_|_|_| _|                                  _| $
_|    _|   _|_|   _| _|   _|_|             _|     _|_|_|     _|_|   _|  _|_|   _|_|   _| $
_|_|_|_| _|_|_|_| _| _| _|    _|           _|     _|    _| _|_|_|_| _|_|     _|_|_|_| _| $
_|    _| _|       _| _| _|    _|           _|     _|    _| _|       _|       _|          $
_|    _|   _|_|_| _| _|   _|_|             _|     _|    _|   _|_|_| _|         _|_|_| _| $
                                                                                         $
                                                                                         $
$

      _   _    _    _____   _______   _____   ______  __     __ 
     | | | |  | |  / ____| |__   __| |_   _| |  ____| \ \   / / 
     | | | |  | | | (___      | |      | |   | |__     \ \_/ /  
 _   | | | |  | |  \___ \     | |      | |   |  __|     \   /   
| |__| | | |__| |  ____) |    | |     _| |_  | |         | |    
 \____/   \____/  |_____/     |_|    |_____| |_|         |_|    
                                                                
                                                                
To change the alignment of the output it must be possible to use a flag --align=<type>, in which type can be :

    center

    left

    right

    justify


    Only text that fits the terminal size will be tested.

    The flag must have exactly the same format as above, any other formats return the following usage message:

Usage: go run . [OPTION] [STRING] [BANNER]

Example: go run . --align=right something standard


 _____    ______  __      __  ______   _____     _____   ______  
|  __ \  |  ____| \ \    / / |  ____| |  __ \   / ____| |  ____| 
| |__) | | |__     \ \  / /  | |__    | |__) | | (___   | |__    
|  _  /  |  __|     \ \/ /   |  __|   |  _  /   \___ \  |  __|   
| | \ \  | |____     \  /    | |____  | | \ \   ____) | | |____  
|_|  \_\ |______|     \/     |______| |_|  \_\ |_____/  |______| 
                                                                 
                        

    Ascii-reverse consists on reversing the process, converting the graphic representation into a text.
    You will have to create a text file containing a graphic representation of a random string.
    The argument will be a flag, --reverse=<fileName>, in which --reverse is the flag and <fileName> is the file name.
    The program prints this string in normal text in the terminal.
